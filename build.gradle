apply plugin: 'java'

allprojects  {
  apply plugin: 'maven'
  group = 'com.kinvey'
  version = '3.0.0-BETA-04'
  description = "The Kinvey SDK makes it easy to write Android and Java apps with Kinvey"
  ext.kinveyApiVersion = '4'
}



subprojects {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenLocal()
    jcenter()
    maven {
      url  "http://dl.bintray.com/realm/maven"
    }
    maven {
      url "https://jitpack.io"
    }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "http://repo1.maven.org/maven2" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

  }
}



task makeAndroidJar(type: Copy)  {
    from 'android-lib/build/intermediates/bundles/release'
    from 'android-lib/build/outputs/aar'
    into 'release/build/android'
    include('classes.jar')
    include('android-lib-release.aar')
    rename('classes.jar', 'kinvey-android-' + version + '.jar')
    rename('android-lib-release.aar', 'kinvey-android-' + version + '.aar')

}

task copyAndroid(type: Copy)  {
  from 'java-api-core/build/libs'
  into 'release/build/android'
}

task copyJava(type: Copy)  {
  from 'java-lib/build/libs'
  from 'java-api-core/build/libs'
  into 'release/build/nativejava'
}

task zipAndroid(type: Zip) {
  from('release/build/android'){
    include "**/*.jar"
    into "libJar"

  }
  from('release/build/android'){
    include "*.aar"
    include "*core*.jar"
    into "/lib"

  }

  from('release/dependencies'){
    include "*.jar"
    include "*.aar"
    into "/libJar"
  }

  from('release/dependencies'){
    include "*.jar"
    include "*.aar"
    into "/lib"
  }

  from 'release/readme/android'
    baseName = 'kinvey-android'
    destinationDir = file('release/zipped')
}

task zipJava(type: Zip)  {
  from('release/build/nativejava'){
    into '/libs'
  }
  from('release/dependencies'){
    include "*.jar"
    into '/libs'
  }
  from 'release/readme/nativejava'
    baseName = 'kinvey-java'
    destinationDir = file('release/zipped')

}

task cleanDir{
  delete 'release/build'
}

task prepCore{
  prepCore.dependsOn(":java-api-core:clean")
  prepCore.dependsOn(":java-api-core:cleanTest")
  prepCore.dependsOn(":java-api-core:cleanDocgen")
  prepCore.dependsOn(":java-api-core:build")
  prepCore.dependsOn(":java-api-core:docgen")
}

task prepAndroid{
  prepAndroid.dependsOn(":android-lib:clean")
  prepAndroid.dependsOn(":android-lib:cleanTest")
  prepAndroid.dependsOn(":android-lib:cleanDocgen")
  prepAndroid.dependsOn(":android-lib:build")
  prepAndroid.dependsOn(":android-lib:docgen")
}

task prepJava{
  prepJava.dependsOn(":java-lib:clean")
  prepJava.dependsOn(":java-lib:cleanTest")
  prepJava.dependsOn(":java-lib:cleanDocgen")
  prepJava.dependsOn(":java-lib:build")
  prepJava.dependsOn(":java-lib:docgen")
}

task prepSecure{
  prepSecure.dependsOn(":android-secure:clean")
  prepSecure.dependsOn(":android-secure:cleanTest")
  prepSecure.dependsOn(":android-secure:build")
}

task release(dependsOn: ['cleanDir', 'prepCore', 'prepJava', 'prepAndroid'/*, 'prepSecure'*/, 'makeAndroidJar', 'copyAndroid', 'copyJava', 'zipAndroid', 'zipJava']){
    description 'Performs the complete release process (except for bumping version number!)'
}

prepCore.mustRunAfter cleanDir
prepAndroid.mustRunAfter prepCore
prepJava.mustRunAfter prepAndroid
//prepSecure.mustRunAfter prepJava
//prepSecure.mustRunAfter prepAndroid
makeAndroidJar.mustRunAfter prepJava
copyAndroid.mustRunAfter makeAndroidJar
copyJava.mustRunAfter copyAndroid
zipAndroid.mustRunAfter copyJava
//zipAndroid.mustRunAfter copyAndroid

zipJava.mustRunAfter zipAndroid
release.mustRunAfter zipJava
//release.mustRunAfter zipAndroid